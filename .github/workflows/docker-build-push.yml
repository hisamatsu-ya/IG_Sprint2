name: Build, Test (API), and Push images

on:
  push:
    branches: [ "main", "cinema" ]
    paths:
      - "src/**"
      - ".github/workflows/docker-build-push.yml"
  release:
    types: [ "published" ]
  workflow_dispatch: {}

env:
  REGISTRY: ghcr.io
  IMAGE_NS: ghcr.io/${{ toLower(github.repository) }}  # <- owner/repo в нижнем регистре
  DOCKER_BUILDKIT: 1
  COMPOSE_DOCKER_CLI_BUILD: 1

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  build-test-push:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Debug IMAGE_NS
        run: echo "IMAGE_NS=${{ env.IMAGE_NS }}"

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to GHCR
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      # ---------- Build images (no push yet) ----------
      - name: Build events-service
        uses: docker/build-push-action@v6
        with:
          context: ./src/microservices/events
          file: ./src/microservices/events/Dockerfile
          platforms: linux/amd64
          push: false
          tags: |
            ${{ env.IMAGE_NS }}/events-service:sha-${{ github.sha }}
            ${{ env.IMAGE_NS }}/events-service:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Build proxy-service
        uses: docker/build-push-action@v6
        with:
          context: ./src/microservices/proxy
          file: ./src/microservices/proxy/Dockerfile
          platforms: linux/amd64
          push: false
          tags: |
            ${{ env.IMAGE_NS }}/proxy-service:sha-${{ github.sha }}
            ${{ env.IMAGE_NS }}/proxy-service:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max

      # ---------- Spin up the stack & wait ----------
      - name: Compose up infra & services
        shell: bash
        run: |
          docker compose up -d --build \
            zookeeper kafka kafka-ui postgres \
            monolith movies-service events-service proxy-service

      - name: Wait for readiness
        shell: bash
        run: |
          set -euo pipefail
          for i in {1..120}; do
            ok=1
            curl -fsS http://localhost:8080/health    || ok=0
            curl -fsS http://localhost:8081/health    || ok=0
            curl -fsS http://localhost:8082/healthz   || ok=0
            curl -fsS http://localhost:8000/health    || ok=0
            if [ "$ok" -eq 1 ]; then echo "All services are healthy"; exit 0; fi
            sleep 3
          done
          echo "Services not healthy in time" >&2
          docker compose ps
          docker compose logs --no-color monolith movies-service events-service proxy-service | tail -n 300 || true
          exit 1

      # ---------- Install & run API tests ----------
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 'lts/*'
          cache: 'npm'
          cache-dependency-path: tests/postman/package-lock.json

      - name: Install t
